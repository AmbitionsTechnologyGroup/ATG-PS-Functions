Function Debug-UmbrellaDNS {

	#Policy exposer:
	$Lookup = Resolve-DnsName -Name debug.opendns.com -Type txt
	$OrgID = ($Lookup | Where-Object -Property Strings -Match "orgid").Strings -replace "[^0-9]" , ''
	$Bundle = ($Lookup | Where-Object -Property Strings -Match "bundle").Strings -replace "[^0-9]" , ''
	$PolicyURL = 'https://dashboard.umbrella.com/o/' + $OrgID + '/#/configuration/policy/' + $Bundle
	Write-Output "Organization ID: $OrgID"
	Write-Output "Policy ID: $Bundle"
	Write-Output "Umbrella DNS Policy applied to this computer:`n`n$PolicyURL"
	
	#Diagnostic executable:
	$X64exe = ${Env:ProgramFiles(x86)} + "\OpenDNS\Umbrella Roaming Client\UmbrellaDiagnostic.exe"
	$X86exe = $ENV:ProgramFiles + "\OpenDNS\Umbrella Roaming Client\UmbrellaDiagnostic.exe"
	If (Test-Path $X64exe -ea SilentlyContinue) {
		$UDexe = $X64exe
	} ElseIf (Test-Path $X86exe -ea SilentlyContinue) {
		$UDexe = $X86exe
	} ElseIf (Get-Service csc_umbrellaagent) {
		$CSCAgent = (Get-Service csc_umbrellaagent)
		Write-Warning "The new $($CSCAgent.DisplayName) is installed and it is $($CSCAgent.Status).`nThis troubleshooting command does not apply."
		Break
	} Else {
		Write-Warning "Umbrella Diagnostics do not appear to be installed."
		Break
	}
	Write-Host "Here is the help file for UmbrellaDiagnostic.exe:"
Write-Host @"

  -d, --domain=VALUE         A specific URL to target with tests (e.g.
							   opendns.com)
  -s, --silent               Automatically run tests in silent mode (will not
							   show the UI or new windows; defaults to -i
							   output)
  -i, --internet             Output all results to diagnostic.opendns.com;
							   destination URL will print to console as
							   'url=URL'
  -o, --output=VALUE         Output to a file, which will print to console as
							   'outputFile=FILE'; can be a full path, make sure
							   to use "quotes" if needed
  -c, --console              Output all results to console as text
	  --erc                  Force the Roaming Client tests to be performed
	  --noerc                Skip the Roaming Client tests even if it's
							   installed
  -h, -?, --help             Display this usage statement

If run without -o or -c arguments, -i is the default output; if run with -o or -c, then -i must be explicitly set if desired as additional output.

"@
	Write-Host "Recommend running with arguments '--silent --internet --console'.`nAdd --domain=<domain> to test internal or external targets.`n"
	$Args = Read-Host "What arguments would you like to add? Just press enter if you wish to launch the window.`n"
	If ($Args) {
		Start-Process $UDexe -ArgumentList $Args
	} Else {
		Start-Process $UDexe
	}
}

Function Debug-SharedMailboxRestoreRequest {
	<#
	.SYNOPSIS
		Draft function. Investigates why a mailbox restore shows as Investigate.
	#>
	$Stats = Get-MailboxRestoreRequest -Status "Failed" | Get-MailboxRestoreRequestStatistics -IncludeReport
	Write-Host "$Stats.Name"
	$stats.Report.Failures | Format-List FailureType, Message
	$stats.Report.MailboxVerification | where { $_.DataConsistencyScore -ne "Perfect" } | Format-List TargetFolder, MissingItemsInTargetBucket
}

Function Debug-ServerRebootScript {
# All scripts and funtions are now run from ps.ambitionsgroup.com (github)
	Write-Host "Checking Scheduled Task"
	$Task = Get-ScheduledTask -TaskName "ATG*Scheduled*Server*Reboot*"
	If ($Task) {
		Write-Host -NoNewLine "Task State: $($Task.State)"
		#$Task | Format-List State
		$Task | Get-ScheduledTaskInfo | Format-List LastRunTime,LastTaskResult,NextRunTime
		If ($Task.Actions.Execute -eq 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe') {
			Write-Host -ForegroundColor Green "Scheduled Program Path looks correct."
		} Else {
			Write-Host -ForegroundColor Red "Scheduled Program looks incorrect."
			Write-Host -ForegroundColor Yellow "$($Task.Actions.Execute)"
			Write-Host -ForegroundColor Red "It should be `'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe`'"
		}

		If ($Task.Actions.Arguments -eq '-ExecutionPolicy Bypass -NoProfile -File "C:\Ambitions\scripts\ServerReboots.ps1"') {
			Write-Host -ForegroundColor Green "Scheduled Program arguments looks correct."
		} Else {
			Write-Host -ForegroundColor Red "Scheduled Program arguments looks incorrect."
			Write-Host -ForegroundColor Yellow "$($Task.Actions.Arguments)"
			Write-Host -ForegroundColor Red "It should be `'-ExecutionPolicy Bypass -NoProfile -File `"C:\Ambitions\scripts\ServerReboots.ps1`"`'"
		}
	} Else {
		Write-Warning "Scheduled task does not exist!"
	}
	Pause
	$VMAutoStart = Get-VM -ErrorAction SilentlyContinue | Select-Object VMname, AutomaticStartAction, AutomaticStartDelay
	If ($VMAutoStart) {
		Write-Host "Checking virtual machine auto start settings. Make sure everything in use is set to Start."
		$VMAutoStart
	}
	If ($VMAutoStart) {
		Pause
	}
	Write-Host "Checking Server List"
	$ServerList = Get-Content -Path C:\Ambitions\Scripts\Server_Reboots.csv -ErrorAction SilentlyContinue | ConvertFrom-Csv
	If (!($ServerList)) {
		Write-Warning "Server List CSV File does not exist!"
	} Else {
		$ServerList | Format-Table
		Pause
		Write-Host -NoNewLine "`n - Retrieving Ambitions Server Reboot Script -"
		$greenCheck = @{
			Object = [Char]8730
			ForegroundColor = 'Green'
			NoNewLine = $true
			}
		$progressPreference = 'silentlyContinue'
		[System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192
		Set-ExecutionPolicy Bypass -Scope Process -Force
		(Invoke-WebRequest "https://raw.githubusercontent.com/AmbitionsTechnologyGroup/ATG-PS-Functions/master/Scripts/Server-Reboots/ServerReboots_WhatIf.txt" -UseBasicParsing).Content | Invoke-Expression
	}
}

Function Debug-UmbrellaProxiedDnsServer {
	$IsInstalled = Get-Service -Name Umbrella_RC -ErrorAction SilentlyContinue
	If ($IsInstalled) {
		Write-Host "------------------------------------------------------------------"
		Write-Host -ForegroundColor Green "Umbrella DNS client is installed."
		$OpenDnsPath = $Env:ProgramData + "\OpenDNS\ERC"
		Write-Host "------------------------------------------------------------------`nProxied DNS servers:"
		$Servers = Get-ChildItem -Path $OpenDnsPath -Filter "Resolver*.conf"
		ForEach ($Server in $Servers) {
			If ($Server -ne $Servers[-1]){
				$Server | Get-Content
				Write-Host "########################"
			} Else {
				$Server | Get-Content
			}
		}
		$OpenDnsPath = $Env:ProgramData + "\OpenDNS\ERC"
		$Servers = ($Servers | Select-String -Pattern '\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b').Line -replace 'nameserver '
		$Servers = $Servers | Sort-Object | Get-Unique
		Write-Host "------------------------------------------------------------------`nTesting Proxied DNS Servers"
		ForEach ($Server in $Servers) {
			Write-Host -NoNewline "Testing $Server`: "
			Try {
				$FQDN = $((Resolve-DnsName -Name $Server -Server $Server -DnsOnly -QuickTimeout -ErrorAction Stop).NameHost)
				Write-Host -ForegroundColor Green "$Server is responsive. FQDN: $FQDN"
				Clear-Variable FQDN -Force -ErrorAction SilentlyContinue
			} Catch {
				Write-Host -ForegroundColor Red "$Server is unresponsive."
			}
		}
		Write-Host "------------------------------------------------------------------`nExcluded IP / DNS values:"
		Get-ChildItem -Path $OpenDnsPath -Filter "*list.txt" | Get-Content
	} ElseIf (Get-Service csc_umbrellaagent) {
		$CSCAgent = (Get-Service csc_umbrellaagent)
		Write-Host "The new $($CSCAgent.DisplayName) is installed and it is $($CSCAgent.Status).`nThis troubleshooting command does not apply."
	} Else {
		Write-Host -ForegroundColor Red "Umbrella DNS client is NOT installed."
	}
}